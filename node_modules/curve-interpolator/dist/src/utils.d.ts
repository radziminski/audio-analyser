import { Vector } from "./interfaces";
/**
 * Fill all components of a vector with a value
 * @param v vector
 * @param val fill value
 */
export declare function fill(v: Vector, val: number): Vector;
/**
 * Map all components of a vector using provided mapping function.
 * @param v vector
 * @param func mapping function
 */
export declare function map(v: Vector, func: (c: number, i: number) => number): Vector;
/**
 * Reduce a vector to a single valie using the provided reduce function.
 * @param v vector
 * @param func reduce function
 * @param r initial value
 */
export declare function reduce(v: Vector, func: (s: number, c: number, i: number) => number, r?: number): number;
/**
 * Reduce the set of coordinates for a curve by eliminating points that are not
 * contributing to the shape of the curve, i.e. multiple points making out a linear
 * segment.
 * @param inputArr set of coordinates
 * @param maxOffset threshold to use for determining if a point is part of a linear line segment
 * @param maxDistance points will not be removed if the distance equals or is greater than the given maxDistance
 */
export declare function simplify2d(inputArr: number[][], maxOffset?: number, maxDistance?: number): number[][];
