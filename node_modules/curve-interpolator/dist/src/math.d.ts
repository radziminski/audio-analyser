import { Vector } from './interfaces';
export declare const EPS: number;
/**
 * Solve 2nd degree equations
 * @param a 2nd degree coefficient
 * @param b 1st degree coefficient
 * @param c constant coefficient
 */
export declare function getQuadRoots(a: number, b: number, c: number): number[];
/**
 * Solve 3rd degree equations
 * @param a 3rd degree coefficient
 * @param b 2nd degree coefficient
 * @param c 1st degree coefficient
 * @param d constant coefficient
 */
export declare function getCubicRoots(a: number, b: number, c: number, d: number): number[];
/**
 * Calculate coefficients from point values and optional target value for a spline
 * curve with a specified tension
 * @param v0 value of first control point
 * @param v1 value of second control point
 * @param v2 value of third control point
 * @param v3 value of fourth control point
 * @param v target value
 * @param tension curve tension
 */
export declare function getCoefficients(v0: number, v1: number, v2: number, v3: number, v?: number, tension?: number): [number, number, number, number];
/**
 * Plugs point values into spline equation and return the result
 * @param t interpolation time
 * @param tension curve tension
 * @param v0 value of first control point
 * @param v1 value of second control point
 * @param v2 value of third control point
 * @param v3 value of fourth control point
 */
export declare function solveForT(t: number, tension: number, v0: number, v1: number, v2: number, v3: number): number;
/**
 * Plugs point values into the derivative of the spline equation and return the result
 * @param t interpolation time
 * @param tension curve tension
 * @param v0 value of first control point
 * @param v1 value of second control point
 * @param v2 value of third control point
 * @param v3 value of fourth control point
 */
export declare function getDerivativeOfT(t: number, tension: number, v0: number, v1: number, v2: number, v3: number): number;
/**
 * Calculate the distance between two points
 * @param p1 coordinates of point 1
 * @param p2 coordinates of point 2
 */
export declare function distance(p1: Vector, p2: Vector): number;
/**
 * Normalizes a vector (mutate input)
 * @param v input array/vector to normalize
 */
export declare function normalize(v: Vector): Vector;
/**
 * Rotates a vector 90 degrees to make it orthogonal (mutates input vector)
 * @param v vector to rotate
 */
export declare function orthogonal(v: Vector): Vector;
/**
 * Clamp an input value to min and max
 * @param value input value
 * @param min min value
 * @param max max value
 */
export declare function clamp(value: number, min?: number, max?: number): number;
