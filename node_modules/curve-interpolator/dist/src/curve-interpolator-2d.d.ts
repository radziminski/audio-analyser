import CurveInterpolator from './curve-interpolator';
import { Vector, VectorType, BBox } from './interfaces';
/**
 * Bounding box interface
 */
export interface BBoxLegacy extends BBox {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
}
/**
 * Legacy support for v1 interface (2d curves)
 */
export default class CurveInterpolator2D extends CurveInterpolator {
    constructor(points: Vector[], tension?: number, arcDivisions?: number, closed?: boolean);
    /**
     * Find at which value(s) of x the curve is intersected by the given value
     * along the y-axis
     * @param y value at y-axis
     * @param max max solutions (i.e. 0=all, 1=first along curve, -1=last along curve)
     */
    x(y: number, max?: number, margin?: number): number | number[];
    /**
     * Find at which value(s) of y the curve is intersected by the given value
     * along the x-axis
     * @param x value at x-axis
     * @param max max solutions (i.e. 0=all, 1=first along curve, -1=last along curve)
     */
    y(x: number, max?: number, margin?: number): number | number[];
    /**
     * Get the normal at the given position.
     * @param position position on curve (0 - 1)
     * @param target optional target
     */
    getNormalAt<T extends VectorType>(position: number, target: T): T;
    getNormalAt(position: number): Vector;
    /**
     * Get the angle (in radians) at the given position.
     * @param position position on curve (0 - 1)
     * @param target optional target
     */
    getAngleAt(position: number): number;
    /**
     * Get a bounding box for the curve or the segment given by the
     * from and to parameters
     * @param from position from
     * @param to position to
     */
    getBoundingBox(from?: number, to?: number): BBoxLegacy;
}
