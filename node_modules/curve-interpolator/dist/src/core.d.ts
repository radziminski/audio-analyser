import { Vector, LookupOptions, BBoxOptions, BBox, VectorType, CurveOptions, InterpolationOptions, PositionLookupOptions } from './interfaces';
/**
 * Find the point on the curve at time t, where t is a number between 0 and 1.
 * Note that splines (curve segements) may have different lengths, thus t will
 * not be evenly distributed.
 * @param t time along curve (0 - 1)
 * @param points set of coordinates/control points making out the curve
 * @param options interpolation options
 * @param target optional target instance to add results to
 */
export declare function getPointAtT<T extends VectorType>(t: number, points: Vector[], target: T): T;
export declare function getPointAtT<T extends VectorType>(t: number, points: Vector[], options: InterpolationOptions, target: T): T;
export declare function getPointAtT(t: number, points: Vector[], options: null, target: Vector): Vector;
export declare function getPointAtT(t: number, points: Vector[], options: InterpolationOptions): Vector;
export declare function getPointAtT(t: number, points: Vector[], options: InterpolationOptions, target: Vector): Vector;
/**
 * Find the tangent on the curve at time t, where t is a number between 0 and 1.
 * Note that splines (curve segements) may have different lengths, thus t will
 * not be evenly distributed.
 * @param t time along curve (0 - 1)
 * @param points set of coordinates/control points making out the curve
 * @param options curve options (tension [0-1], closed [true/false])
 * @param target optional target instance to add results to
 */
export declare function getTangentAtT<T extends VectorType>(t: number, points: Vector[], options: null, target: T): T;
export declare function getTangentAtT<T extends VectorType>(t: number, points: Vector[], options: CurveOptions, target: T): T;
export declare function getTangentAtT(t: number, points: Vector[]): Vector;
export declare function getTangentAtT(t: number, points: Vector[], options: CurveOptions): Vector;
export declare function getTangentAtT(t: number, points: Vector[], options: CurveOptions, target: Vector): Vector;
/**
 * Break curve into segments and return the curve length at each segment index.
 * Used for mapping between t and u along the curve.
 * @param points set of coordinates/control points making out the curve
 * @param divisions number of segments to divide the curve into to estimate its length
 * @param options curve options (tension [0-1], closed [true/false])
 */
export declare function getArcLengths(points: Vector[], divisions: number, options?: CurveOptions): any[];
/**
 * This maps a value of normalized t (time along curve) to a value of u, where u is an uniformly
 * distributed index along the curve between 0 and 1
 * @param u point on curve between 0 and 1.
 * @param arcLengths aggregated curve segment lengths
 */
export declare function getUtoTmapping(u: number, arcLengths: number[]): number;
/**
 * This maps a normalized value of T (0-1) to a global uniform position U (0-1),
 * @param t point on curve between 0 and 1.
 * @param arcLengths aggregated curve segment lengths
 */
export declare function getTtoUmapping(t: number, arcLengths: number[]): number;
/**
 * Gets and solves the cubic spline equation for t
 * @param lookup target lookup value
 * @param tension curve tension
 * @param v0 axis value of control point 0
 * @param v1 axis value of control point 1
 * @param v2 axis value of control point 2
 * @param v3 axis value of control point 3
 */
export declare function getTAtValue(lookup: number, tension: number, v0: number, v1: number, v2: number, v3: number): number[];
/**
 * Looks up values intersecting the curve along one of the axises (x=0, y=1, z=2 ...).
 * @param lookup lookup value along the axis
 * @param points control points
 * @param options lookup options to control axis, tension, max solutions etc.
 */
export declare function valuesLookup(lookup: number, points: Vector[], options?: LookupOptions): Vector[];
/**
 * Looks up positions (U values) intersecting the curve along one of the axises (x=0, y=1, z=2 ...).
 * @param lookup lookup value along the axis
 * @param points control points
 * @param options lookup options to control axis, tension, max solutions etc.
 */
export declare function positionsLookup(lookup: number, points: Vector[], options?: PositionLookupOptions): number[];
/**
 * Lookup tangents at the intersection points formed by a value along one of the axises (x=0, y=1, z=2 ...).
 * @param lookup lookup value along the axis
 * @param points control points
 * @param options lookup options to control axis, tension, max solutions etc.
 */
export declare function tangentsLookup(lookup: number, points: Vector[], options?: LookupOptions): Vector[];
/**
 * Get the bounding box for the curve or a segment of the curve
 * @param points Curve points
 * @param options Bounding box options
 */
export declare function getBoundingBox(points: Vector[], options?: BBoxOptions): BBox;
